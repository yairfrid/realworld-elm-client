{-
   Conduit API
   Conduit API documentation

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Article
    , Comment
    , CreateArticle201Response
    , CreateArticleComment200Response
    , CreateArticleCommentRequest
    , CreateArticleRequest
    , CreateUserRequest
    , GenericErrorModel
    , GenericErrorModelErrors
    , GetArticleComments200Response
    , GetArticlesFeed200Response
    , GetProfileByUsername200Response
    , GetTags200Response
    , Login200Response
    , LoginRequest
    , LoginUser
    , NewArticle
    , NewComment
    , NewUser
    , Profile
    , UpdateArticle
    , UpdateArticleRequest
    , UpdateCurrentUserRequest
    , UpdateUser
    , User
    , encodeArticle
    , encodeComment
    , encodeCreateArticle201Response
    , encodeCreateArticleComment200Response
    , encodeCreateArticleCommentRequest
    , encodeCreateArticleRequest
    , encodeCreateUserRequest
    , encodeGenericErrorModel
    , encodeGenericErrorModelErrors
    , encodeGetArticleComments200Response
    , encodeGetArticlesFeed200Response
    , encodeGetProfileByUsername200Response
    , encodeGetTags200Response
    , encodeLogin200Response
    , encodeLoginRequest
    , encodeLoginUser
    , encodeNewArticle
    , encodeNewComment
    , encodeNewUser
    , encodeProfile
    , encodeUpdateArticle
    , encodeUpdateArticleRequest
    , encodeUpdateCurrentUserRequest
    , encodeUpdateUser
    , encodeUser
    , articleDecoder
    , commentDecoder
    , createArticle201ResponseDecoder
    , createArticleComment200ResponseDecoder
    , createArticleCommentRequestDecoder
    , createArticleRequestDecoder
    , createUserRequestDecoder
    , genericErrorModelDecoder
    , genericErrorModelErrorsDecoder
    , getArticleComments200ResponseDecoder
    , getArticlesFeed200ResponseDecoder
    , getProfileByUsername200ResponseDecoder
    , getTags200ResponseDecoder
    , login200ResponseDecoder
    , loginRequestDecoder
    , loginUserDecoder
    , newArticleDecoder
    , newCommentDecoder
    , newUserDecoder
    , profileDecoder
    , updateArticleDecoder
    , updateArticleRequestDecoder
    , updateCurrentUserRequestDecoder
    , updateUserDecoder
    , userDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias Article =
    { slug : String
    , title : String
    , description : String
    , body : String
    , tagList : List (String)
    , createdAt : Posix
    , updatedAt : Posix
    , favorited : Bool
    , favoritesCount : Int
    , author : Profile
    }


type alias Comment =
    { id : Int
    , createdAt : Posix
    , updatedAt : Posix
    , body : String
    , author : Profile
    }


type alias CreateArticle201Response =
    { article : Article
    }


type alias CreateArticleComment200Response =
    { comment : Comment
    }


type alias CreateArticleCommentRequest =
    { comment : NewComment
    }


type alias CreateArticleRequest =
    { article : NewArticle
    }


type alias CreateUserRequest =
    { user : NewUser
    }


type alias GenericErrorModel =
    { errors : GenericErrorModelErrors
    }


type alias GenericErrorModelErrors =
    { body : List (String)
    }


type alias GetArticleComments200Response =
    { comments : List (Comment)
    }


type alias GetArticlesFeed200Response =
    { articles : List (Article)
    , articlesCount : Int
    }


type alias GetProfileByUsername200Response =
    { profile : Profile
    }


type alias GetTags200Response =
    { tags : List (String)
    }


type alias Login200Response =
    { user : User
    }


type alias LoginRequest =
    { user : LoginUser
    }


type alias LoginUser =
    { email : String
    , password : String
    }


type alias NewArticle =
    { title : String
    , description : String
    , body : String
    , tagList : Maybe (List (String))
    }


type alias NewComment =
    { body : String
    }


type alias NewUser =
    { username : String
    , email : String
    , password : String
    }


type alias Profile =
    { username : String
    , bio : String
    , image : String
    , following : Bool
    }


type alias UpdateArticle =
    { title : Maybe String
    , description : Maybe String
    , body : Maybe String
    }


type alias UpdateArticleRequest =
    { article : UpdateArticle
    }


type alias UpdateCurrentUserRequest =
    { user : UpdateUser
    }


type alias UpdateUser =
    { email : Maybe String
    , password : Maybe String
    , username : Maybe String
    , bio : Maybe String
    , image : Maybe String
    }


type alias User =
    { email : String
    , token : String
    , username : String
    , bio : String
    , image : String
    }


-- ENCODER


encodeArticle : Article -> Json.Encode.Value
encodeArticle =
    encodeObject << encodeArticlePairs


encodeArticleWithTag : ( String, String ) -> Article -> Json.Encode.Value
encodeArticleWithTag (tagField, tag) model =
    encodeObject (encodeArticlePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeArticlePairs : Article -> List EncodedField
encodeArticlePairs model =
    let
        pairs =
            [ encode "slug" Json.Encode.string model.slug
            , encode "title" Json.Encode.string model.title
            , encode "description" Json.Encode.string model.description
            , encode "body" Json.Encode.string model.body
            , encode "tagList" (Json.Encode.list Json.Encode.string) model.tagList
            , encode "createdAt" Api.Time.encodeDateTime model.createdAt
            , encode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            , encode "favorited" Json.Encode.bool model.favorited
            , encode "favoritesCount" Json.Encode.int model.favoritesCount
            , encode "author" encodeProfile model.author
            ]
    in
    pairs


encodeComment : Comment -> Json.Encode.Value
encodeComment =
    encodeObject << encodeCommentPairs


encodeCommentWithTag : ( String, String ) -> Comment -> Json.Encode.Value
encodeCommentWithTag (tagField, tag) model =
    encodeObject (encodeCommentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCommentPairs : Comment -> List EncodedField
encodeCommentPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "createdAt" Api.Time.encodeDateTime model.createdAt
            , encode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            , encode "body" Json.Encode.string model.body
            , encode "author" encodeProfile model.author
            ]
    in
    pairs


encodeCreateArticle201Response : CreateArticle201Response -> Json.Encode.Value
encodeCreateArticle201Response =
    encodeObject << encodeCreateArticle201ResponsePairs


encodeCreateArticle201ResponseWithTag : ( String, String ) -> CreateArticle201Response -> Json.Encode.Value
encodeCreateArticle201ResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateArticle201ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateArticle201ResponsePairs : CreateArticle201Response -> List EncodedField
encodeCreateArticle201ResponsePairs model =
    let
        pairs =
            [ encode "article" encodeArticle model.article
            ]
    in
    pairs


encodeCreateArticleComment200Response : CreateArticleComment200Response -> Json.Encode.Value
encodeCreateArticleComment200Response =
    encodeObject << encodeCreateArticleComment200ResponsePairs


encodeCreateArticleComment200ResponseWithTag : ( String, String ) -> CreateArticleComment200Response -> Json.Encode.Value
encodeCreateArticleComment200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateArticleComment200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateArticleComment200ResponsePairs : CreateArticleComment200Response -> List EncodedField
encodeCreateArticleComment200ResponsePairs model =
    let
        pairs =
            [ encode "comment" encodeComment model.comment
            ]
    in
    pairs


encodeCreateArticleCommentRequest : CreateArticleCommentRequest -> Json.Encode.Value
encodeCreateArticleCommentRequest =
    encodeObject << encodeCreateArticleCommentRequestPairs


encodeCreateArticleCommentRequestWithTag : ( String, String ) -> CreateArticleCommentRequest -> Json.Encode.Value
encodeCreateArticleCommentRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateArticleCommentRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateArticleCommentRequestPairs : CreateArticleCommentRequest -> List EncodedField
encodeCreateArticleCommentRequestPairs model =
    let
        pairs =
            [ encode "comment" encodeNewComment model.comment
            ]
    in
    pairs


encodeCreateArticleRequest : CreateArticleRequest -> Json.Encode.Value
encodeCreateArticleRequest =
    encodeObject << encodeCreateArticleRequestPairs


encodeCreateArticleRequestWithTag : ( String, String ) -> CreateArticleRequest -> Json.Encode.Value
encodeCreateArticleRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateArticleRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateArticleRequestPairs : CreateArticleRequest -> List EncodedField
encodeCreateArticleRequestPairs model =
    let
        pairs =
            [ encode "article" encodeNewArticle model.article
            ]
    in
    pairs


encodeCreateUserRequest : CreateUserRequest -> Json.Encode.Value
encodeCreateUserRequest =
    encodeObject << encodeCreateUserRequestPairs


encodeCreateUserRequestWithTag : ( String, String ) -> CreateUserRequest -> Json.Encode.Value
encodeCreateUserRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateUserRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateUserRequestPairs : CreateUserRequest -> List EncodedField
encodeCreateUserRequestPairs model =
    let
        pairs =
            [ encode "user" encodeNewUser model.user
            ]
    in
    pairs


encodeGenericErrorModel : GenericErrorModel -> Json.Encode.Value
encodeGenericErrorModel =
    encodeObject << encodeGenericErrorModelPairs


encodeGenericErrorModelWithTag : ( String, String ) -> GenericErrorModel -> Json.Encode.Value
encodeGenericErrorModelWithTag (tagField, tag) model =
    encodeObject (encodeGenericErrorModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenericErrorModelPairs : GenericErrorModel -> List EncodedField
encodeGenericErrorModelPairs model =
    let
        pairs =
            [ encode "errors" encodeGenericErrorModelErrors model.errors
            ]
    in
    pairs


encodeGenericErrorModelErrors : GenericErrorModelErrors -> Json.Encode.Value
encodeGenericErrorModelErrors =
    encodeObject << encodeGenericErrorModelErrorsPairs


encodeGenericErrorModelErrorsWithTag : ( String, String ) -> GenericErrorModelErrors -> Json.Encode.Value
encodeGenericErrorModelErrorsWithTag (tagField, tag) model =
    encodeObject (encodeGenericErrorModelErrorsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenericErrorModelErrorsPairs : GenericErrorModelErrors -> List EncodedField
encodeGenericErrorModelErrorsPairs model =
    let
        pairs =
            [ encode "body" (Json.Encode.list Json.Encode.string) model.body
            ]
    in
    pairs


encodeGetArticleComments200Response : GetArticleComments200Response -> Json.Encode.Value
encodeGetArticleComments200Response =
    encodeObject << encodeGetArticleComments200ResponsePairs


encodeGetArticleComments200ResponseWithTag : ( String, String ) -> GetArticleComments200Response -> Json.Encode.Value
encodeGetArticleComments200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetArticleComments200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetArticleComments200ResponsePairs : GetArticleComments200Response -> List EncodedField
encodeGetArticleComments200ResponsePairs model =
    let
        pairs =
            [ encode "comments" (Json.Encode.list encodeComment) model.comments
            ]
    in
    pairs


encodeGetArticlesFeed200Response : GetArticlesFeed200Response -> Json.Encode.Value
encodeGetArticlesFeed200Response =
    encodeObject << encodeGetArticlesFeed200ResponsePairs


encodeGetArticlesFeed200ResponseWithTag : ( String, String ) -> GetArticlesFeed200Response -> Json.Encode.Value
encodeGetArticlesFeed200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetArticlesFeed200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetArticlesFeed200ResponsePairs : GetArticlesFeed200Response -> List EncodedField
encodeGetArticlesFeed200ResponsePairs model =
    let
        pairs =
            [ encode "articles" (Json.Encode.list encodeArticle) model.articles
            , encode "articlesCount" Json.Encode.int model.articlesCount
            ]
    in
    pairs


encodeGetProfileByUsername200Response : GetProfileByUsername200Response -> Json.Encode.Value
encodeGetProfileByUsername200Response =
    encodeObject << encodeGetProfileByUsername200ResponsePairs


encodeGetProfileByUsername200ResponseWithTag : ( String, String ) -> GetProfileByUsername200Response -> Json.Encode.Value
encodeGetProfileByUsername200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetProfileByUsername200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetProfileByUsername200ResponsePairs : GetProfileByUsername200Response -> List EncodedField
encodeGetProfileByUsername200ResponsePairs model =
    let
        pairs =
            [ encode "profile" encodeProfile model.profile
            ]
    in
    pairs


encodeGetTags200Response : GetTags200Response -> Json.Encode.Value
encodeGetTags200Response =
    encodeObject << encodeGetTags200ResponsePairs


encodeGetTags200ResponseWithTag : ( String, String ) -> GetTags200Response -> Json.Encode.Value
encodeGetTags200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetTags200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetTags200ResponsePairs : GetTags200Response -> List EncodedField
encodeGetTags200ResponsePairs model =
    let
        pairs =
            [ encode "tags" (Json.Encode.list Json.Encode.string) model.tags
            ]
    in
    pairs


encodeLogin200Response : Login200Response -> Json.Encode.Value
encodeLogin200Response =
    encodeObject << encodeLogin200ResponsePairs


encodeLogin200ResponseWithTag : ( String, String ) -> Login200Response -> Json.Encode.Value
encodeLogin200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeLogin200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLogin200ResponsePairs : Login200Response -> List EncodedField
encodeLogin200ResponsePairs model =
    let
        pairs =
            [ encode "user" encodeUser model.user
            ]
    in
    pairs


encodeLoginRequest : LoginRequest -> Json.Encode.Value
encodeLoginRequest =
    encodeObject << encodeLoginRequestPairs


encodeLoginRequestWithTag : ( String, String ) -> LoginRequest -> Json.Encode.Value
encodeLoginRequestWithTag (tagField, tag) model =
    encodeObject (encodeLoginRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLoginRequestPairs : LoginRequest -> List EncodedField
encodeLoginRequestPairs model =
    let
        pairs =
            [ encode "user" encodeLoginUser model.user
            ]
    in
    pairs


encodeLoginUser : LoginUser -> Json.Encode.Value
encodeLoginUser =
    encodeObject << encodeLoginUserPairs


encodeLoginUserWithTag : ( String, String ) -> LoginUser -> Json.Encode.Value
encodeLoginUserWithTag (tagField, tag) model =
    encodeObject (encodeLoginUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLoginUserPairs : LoginUser -> List EncodedField
encodeLoginUserPairs model =
    let
        pairs =
            [ encode "email" Json.Encode.string model.email
            , encode "password" Json.Encode.string model.password
            ]
    in
    pairs


encodeNewArticle : NewArticle -> Json.Encode.Value
encodeNewArticle =
    encodeObject << encodeNewArticlePairs


encodeNewArticleWithTag : ( String, String ) -> NewArticle -> Json.Encode.Value
encodeNewArticleWithTag (tagField, tag) model =
    encodeObject (encodeNewArticlePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNewArticlePairs : NewArticle -> List EncodedField
encodeNewArticlePairs model =
    let
        pairs =
            [ encode "title" Json.Encode.string model.title
            , encode "description" Json.Encode.string model.description
            , encode "body" Json.Encode.string model.body
            , maybeEncode "tagList" (Json.Encode.list Json.Encode.string) model.tagList
            ]
    in
    pairs


encodeNewComment : NewComment -> Json.Encode.Value
encodeNewComment =
    encodeObject << encodeNewCommentPairs


encodeNewCommentWithTag : ( String, String ) -> NewComment -> Json.Encode.Value
encodeNewCommentWithTag (tagField, tag) model =
    encodeObject (encodeNewCommentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNewCommentPairs : NewComment -> List EncodedField
encodeNewCommentPairs model =
    let
        pairs =
            [ encode "body" Json.Encode.string model.body
            ]
    in
    pairs


encodeNewUser : NewUser -> Json.Encode.Value
encodeNewUser =
    encodeObject << encodeNewUserPairs


encodeNewUserWithTag : ( String, String ) -> NewUser -> Json.Encode.Value
encodeNewUserWithTag (tagField, tag) model =
    encodeObject (encodeNewUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNewUserPairs : NewUser -> List EncodedField
encodeNewUserPairs model =
    let
        pairs =
            [ encode "username" Json.Encode.string model.username
            , encode "email" Json.Encode.string model.email
            , encode "password" Json.Encode.string model.password
            ]
    in
    pairs


encodeProfile : Profile -> Json.Encode.Value
encodeProfile =
    encodeObject << encodeProfilePairs


encodeProfileWithTag : ( String, String ) -> Profile -> Json.Encode.Value
encodeProfileWithTag (tagField, tag) model =
    encodeObject (encodeProfilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeProfilePairs : Profile -> List EncodedField
encodeProfilePairs model =
    let
        pairs =
            [ encode "username" Json.Encode.string model.username
            , encode "bio" Json.Encode.string model.bio
            , encode "image" Json.Encode.string model.image
            , encode "following" Json.Encode.bool model.following
            ]
    in
    pairs


encodeUpdateArticle : UpdateArticle -> Json.Encode.Value
encodeUpdateArticle =
    encodeObject << encodeUpdateArticlePairs


encodeUpdateArticleWithTag : ( String, String ) -> UpdateArticle -> Json.Encode.Value
encodeUpdateArticleWithTag (tagField, tag) model =
    encodeObject (encodeUpdateArticlePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateArticlePairs : UpdateArticle -> List EncodedField
encodeUpdateArticlePairs model =
    let
        pairs =
            [ maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "body" Json.Encode.string model.body
            ]
    in
    pairs


encodeUpdateArticleRequest : UpdateArticleRequest -> Json.Encode.Value
encodeUpdateArticleRequest =
    encodeObject << encodeUpdateArticleRequestPairs


encodeUpdateArticleRequestWithTag : ( String, String ) -> UpdateArticleRequest -> Json.Encode.Value
encodeUpdateArticleRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateArticleRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateArticleRequestPairs : UpdateArticleRequest -> List EncodedField
encodeUpdateArticleRequestPairs model =
    let
        pairs =
            [ encode "article" encodeUpdateArticle model.article
            ]
    in
    pairs


encodeUpdateCurrentUserRequest : UpdateCurrentUserRequest -> Json.Encode.Value
encodeUpdateCurrentUserRequest =
    encodeObject << encodeUpdateCurrentUserRequestPairs


encodeUpdateCurrentUserRequestWithTag : ( String, String ) -> UpdateCurrentUserRequest -> Json.Encode.Value
encodeUpdateCurrentUserRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateCurrentUserRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateCurrentUserRequestPairs : UpdateCurrentUserRequest -> List EncodedField
encodeUpdateCurrentUserRequestPairs model =
    let
        pairs =
            [ encode "user" encodeUpdateUser model.user
            ]
    in
    pairs


encodeUpdateUser : UpdateUser -> Json.Encode.Value
encodeUpdateUser =
    encodeObject << encodeUpdateUserPairs


encodeUpdateUserWithTag : ( String, String ) -> UpdateUser -> Json.Encode.Value
encodeUpdateUserWithTag (tagField, tag) model =
    encodeObject (encodeUpdateUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateUserPairs : UpdateUser -> List EncodedField
encodeUpdateUserPairs model =
    let
        pairs =
            [ maybeEncode "email" Json.Encode.string model.email
            , maybeEncode "password" Json.Encode.string model.password
            , maybeEncode "username" Json.Encode.string model.username
            , maybeEncode "bio" Json.Encode.string model.bio
            , maybeEncode "image" Json.Encode.string model.image
            ]
    in
    pairs


encodeUser : User -> Json.Encode.Value
encodeUser =
    encodeObject << encodeUserPairs


encodeUserWithTag : ( String, String ) -> User -> Json.Encode.Value
encodeUserWithTag (tagField, tag) model =
    encodeObject (encodeUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserPairs : User -> List EncodedField
encodeUserPairs model =
    let
        pairs =
            [ encode "email" Json.Encode.string model.email
            , encode "token" Json.Encode.string model.token
            , encode "username" Json.Encode.string model.username
            , encode "bio" Json.Encode.string model.bio
            , encode "image" Json.Encode.string model.image
            ]
    in
    pairs


-- DECODER


articleDecoder : Json.Decode.Decoder Article
articleDecoder =
    Json.Decode.succeed Article
        |> decode "slug" Json.Decode.string 
        |> decode "title" Json.Decode.string 
        |> decode "description" Json.Decode.string 
        |> decode "body" Json.Decode.string 
        |> decode "tagList" (Json.Decode.list Json.Decode.string) 
        |> decode "createdAt" Api.Time.dateTimeDecoder 
        |> decode "updatedAt" Api.Time.dateTimeDecoder 
        |> decode "favorited" Json.Decode.bool 
        |> decode "favoritesCount" Json.Decode.int 
        |> decode "author" profileDecoder 


commentDecoder : Json.Decode.Decoder Comment
commentDecoder =
    Json.Decode.succeed Comment
        |> decode "id" Json.Decode.int 
        |> decode "createdAt" Api.Time.dateTimeDecoder 
        |> decode "updatedAt" Api.Time.dateTimeDecoder 
        |> decode "body" Json.Decode.string 
        |> decode "author" profileDecoder 


createArticle201ResponseDecoder : Json.Decode.Decoder CreateArticle201Response
createArticle201ResponseDecoder =
    Json.Decode.succeed CreateArticle201Response
        |> decode "article" articleDecoder 


createArticleComment200ResponseDecoder : Json.Decode.Decoder CreateArticleComment200Response
createArticleComment200ResponseDecoder =
    Json.Decode.succeed CreateArticleComment200Response
        |> decode "comment" commentDecoder 


createArticleCommentRequestDecoder : Json.Decode.Decoder CreateArticleCommentRequest
createArticleCommentRequestDecoder =
    Json.Decode.succeed CreateArticleCommentRequest
        |> decode "comment" newCommentDecoder 


createArticleRequestDecoder : Json.Decode.Decoder CreateArticleRequest
createArticleRequestDecoder =
    Json.Decode.succeed CreateArticleRequest
        |> decode "article" newArticleDecoder 


createUserRequestDecoder : Json.Decode.Decoder CreateUserRequest
createUserRequestDecoder =
    Json.Decode.succeed CreateUserRequest
        |> decode "user" newUserDecoder 


genericErrorModelDecoder : Json.Decode.Decoder GenericErrorModel
genericErrorModelDecoder =
    Json.Decode.succeed GenericErrorModel
        |> decode "errors" genericErrorModelErrorsDecoder 


genericErrorModelErrorsDecoder : Json.Decode.Decoder GenericErrorModelErrors
genericErrorModelErrorsDecoder =
    Json.Decode.succeed GenericErrorModelErrors
        |> decode "body" (Json.Decode.list Json.Decode.string) 


getArticleComments200ResponseDecoder : Json.Decode.Decoder GetArticleComments200Response
getArticleComments200ResponseDecoder =
    Json.Decode.succeed GetArticleComments200Response
        |> decode "comments" (Json.Decode.list commentDecoder) 


getArticlesFeed200ResponseDecoder : Json.Decode.Decoder GetArticlesFeed200Response
getArticlesFeed200ResponseDecoder =
    Json.Decode.succeed GetArticlesFeed200Response
        |> decode "articles" (Json.Decode.list articleDecoder) 
        |> decode "articlesCount" Json.Decode.int 


getProfileByUsername200ResponseDecoder : Json.Decode.Decoder GetProfileByUsername200Response
getProfileByUsername200ResponseDecoder =
    Json.Decode.succeed GetProfileByUsername200Response
        |> decode "profile" profileDecoder 


getTags200ResponseDecoder : Json.Decode.Decoder GetTags200Response
getTags200ResponseDecoder =
    Json.Decode.succeed GetTags200Response
        |> decode "tags" (Json.Decode.list Json.Decode.string) 


login200ResponseDecoder : Json.Decode.Decoder Login200Response
login200ResponseDecoder =
    Json.Decode.succeed Login200Response
        |> decode "user" userDecoder 


loginRequestDecoder : Json.Decode.Decoder LoginRequest
loginRequestDecoder =
    Json.Decode.succeed LoginRequest
        |> decode "user" loginUserDecoder 


loginUserDecoder : Json.Decode.Decoder LoginUser
loginUserDecoder =
    Json.Decode.succeed LoginUser
        |> decode "email" Json.Decode.string 
        |> decode "password" Json.Decode.string 


newArticleDecoder : Json.Decode.Decoder NewArticle
newArticleDecoder =
    Json.Decode.succeed NewArticle
        |> decode "title" Json.Decode.string 
        |> decode "description" Json.Decode.string 
        |> decode "body" Json.Decode.string 
        |> maybeDecode "tagList" (Json.Decode.list Json.Decode.string) Nothing


newCommentDecoder : Json.Decode.Decoder NewComment
newCommentDecoder =
    Json.Decode.succeed NewComment
        |> decode "body" Json.Decode.string 


newUserDecoder : Json.Decode.Decoder NewUser
newUserDecoder =
    Json.Decode.succeed NewUser
        |> decode "username" Json.Decode.string 
        |> decode "email" Json.Decode.string 
        |> decode "password" Json.Decode.string 


profileDecoder : Json.Decode.Decoder Profile
profileDecoder =
    Json.Decode.succeed Profile
        |> decode "username" Json.Decode.string 
        |> decode "bio" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "following" Json.Decode.bool 


updateArticleDecoder : Json.Decode.Decoder UpdateArticle
updateArticleDecoder =
    Json.Decode.succeed UpdateArticle
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "body" Json.Decode.string Nothing


updateArticleRequestDecoder : Json.Decode.Decoder UpdateArticleRequest
updateArticleRequestDecoder =
    Json.Decode.succeed UpdateArticleRequest
        |> decode "article" updateArticleDecoder 


updateCurrentUserRequestDecoder : Json.Decode.Decoder UpdateCurrentUserRequest
updateCurrentUserRequestDecoder =
    Json.Decode.succeed UpdateCurrentUserRequest
        |> decode "user" updateUserDecoder 


updateUserDecoder : Json.Decode.Decoder UpdateUser
updateUserDecoder =
    Json.Decode.succeed UpdateUser
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecode "password" Json.Decode.string Nothing
        |> maybeDecode "username" Json.Decode.string Nothing
        |> maybeDecode "bio" Json.Decode.string Nothing
        |> maybeDecode "image" Json.Decode.string Nothing


userDecoder : Json.Decode.Decoder User
userDecoder =
    Json.Decode.succeed User
        |> decode "email" Json.Decode.string 
        |> decode "token" Json.Decode.string 
        |> decode "username" Json.Decode.string 
        |> decode "bio" Json.Decode.string 
        |> decode "image" Json.Decode.string 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f